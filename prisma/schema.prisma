// prisma/schema.prisma

datasource db {
  provider  = "mongodb"
  url  	    = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}


enum UserRole {
  ADMIN
  USER
}


model User {
  id                      String                    @id @default(auto()) @map("_id") @db.ObjectId
  name                    String?
  email                   String?                   @unique
  isEmailVerified         Boolean                   @default(false)
  emailVerified           DateTime?
  image                   String?
  password                String?
  role                    UserRole                  @default(USER)
  accounts                Account[]
  isTwoFactorEnabled      Boolean                   @default(false)
  twoFactorConfirmation   TwoFactorConfirmation?
  blogs                   Blogs[]
}


model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  
  access_token       String?  
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  
  session_state      String?

  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}


model VerificationToken {
  id                      String   @id @default(auto()) @map("_id") @db.ObjectId
  userId                  String?
  email                   String
  token                   String   @unique
  expires                 DateTime

  @@unique([email, token])
}


model PasswordResetToken {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  email             String
  token             String   @unique
  expires           DateTime

  @@unique([email, token])
}


model TwoFactorToken {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  email             String
  token             String   @unique
  expires           DateTime

  @@unique([email, token])
}


model TwoFactorConfirmation {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId

  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}


model StudentServices {
  id                String      @id @default(auto()) @map("_id") @db.ObjectId
  studentName       String
  apprenticeships   String
  email             String      @unique
  telephone         String      
  intake            String
  notes             String?
  
}


model CompanyServices {
  id                String      @id @default(auto()) @map("_id") @db.ObjectId
  companyName       String
  contactPerson     String
  apprenticeships   String
  email             String      @unique
  telephone         String
  numberOfTrainees  String
  notes             String?
}


model BlogTags {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  tagName       String
  blogs          Blogs[]
}


model Blogs {
 id             String      @id @default(auto()) @map("_id") @db.ObjectId
 mainTitle      String
 imgUrl         String
 description    String
 subTitle1       String?
 subTitle2       String?
 subTitle3       String?
 subTitle4       String?
 paragraph1      String?
 paragraph2      String?
 paragraph3      String?
 paragraph4      String?
 tag            BlogTags    @relation(fields: [tagId], references: [id])
 tagId          String
 createdBy      User        @relation(fields: [userId], references: [id])
 userId         String

 createdAt DateTime  @default(now())
 updatedAt DateTime  @updatedAt
}


model Contact {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  address       String
  addressOnMap  String?
  telephone     String
  email         String
  workingDays   String?
  workingHours  String?
  time          String?
}

model PhotoTags {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  tagName     String
  photos      Photos[]
  
}

model Photos {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  imgUrl        String
  description   String
  tag           PhotoTags   @relation(fields: [tagId], references: [id])
  tagId         String
}


model Team {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  designation   String
  imgUrl        String
}


model SocialMedia {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  mediaName     String
  icon          String
  link          String
}


model EnquiryMail {
 id            String      @id @default(auto()) @map("_id") @db.ObjectId  
 name          String
 email         String  
 telephone     String    
 message       String 
}